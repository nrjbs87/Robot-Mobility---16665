function [F_motor,M_motor,rpm_motor_dot] = motor_model(F,M,motor_rpm,params)

% Input parameters
% 
%   F,M: required force and moment
%
%   motor_rpm: current motor RPM
%
%   params: Quadcopter parameters
%
% Output parameters
%
%   F_motor: Actual thrust generated by Quadcopter's Motors
%
%   M_motor: Actual Moment generated by the Quadcopter's Motors
%
%   rpm_dot: Derivative of the RPM
%
%************ MOTOR MODEL ************************

% Write code here

cT = params.thrust_coefficient;
cQ = params.moment_scale;
d = params.arm_length;
kM = params.motor_constant;
m = params.mass;

MM = [cT   , cT   , cT   , cT; 
     0     , d*cT , 0    , -d*cT; 
     -d*cT , 0    , d*cT , 0;
     -cQ   , cQ   , -cQ  , cQ];
 
invMM = [1/(4*cT), 0, -1/(2*cT*d), -1/(4*cQ);
         1/(4*cT), 1/(2*cT*d), 0, 1/(4*cQ);
         1/(4*cT), 0, 1/(2*cT*d), -1/(4*cQ);
         1/(4*cT), -1/(2*cT*d), 0, 1/(4*cQ)];
     
B = [F;
     M(1);
     M(2);
     M(3)];

rpm_des = invMM * B;

rpm_des = sqrt(rpm_des);

%threshold 
if rpm_des > params.rpm_max
    rpm_des = rescale(rpm_des, min(rpm_des), params.rpm_max);
end
if rpm_des < params.rpm_min
    rpm_des = rescale(rpm_des, params.rpm_min , max(rpm_des));
end


% changed to real to get rid of img numbers
rpm_motor_dot = real(kM * (rpm_des - motor_rpm));

% maybe square?
actual = MM * motor_rpm.^2;
F_motor = actual(1);
M_motor = actual(2:4);


end
